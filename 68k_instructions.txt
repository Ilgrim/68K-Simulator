EXG Rn,Rn 32:
FMOVE FPm,FPn X;<ea>,FPn B,W,L,S,D,X;FPm,<ea> B,W,L,S,D,X;<ea>,FPcr 32;FPcr,<ea> 32:
FSMOVE FPm,FPn X:
FDMOVE <ea>,FPn:
FMOVEM <ea>,<list>1 32,X;<ea>,Dn X;<list>1,<ea> 32,X;Dn,<ea> X::
LEA <ea>,An 32:
LINK An,#<d> 16,32:
MOVE <ea>,<ea> 8,16,32:
MOVE16 <ea>,<ea> 16 bytes:
MOVEA <ea>,An 16,32→32:
MOVEM list,<ea> 16,32;<ea>,list 16,32→32:
MOVEP Dn,(d16,An) 16,32;(d16,An),Dn 16,32:
MOVEQ #<data>,Dn 8→32:
PEA <ea> 32:
UNLK An 32:
ADD Dn,<ea> 8,16,32;<ea>,Dn 8,16,32:
ADDA <ea>,An 16,32:
ADDI #<data>,<ea> 8,16,32:
ADDQ #<data>,<ea> 8,16,32:
ADDX Dn,Dn 8,16,32;–(An), –(An) 8,16,32:
CLR <ea> 8,16,32:
CMP <ea>,Dn 8,16,32:
CMPA <ea>,An 16,32:
CMPI #<data>,<ea> 8,16,32:
CMPM (An)+,(An)+ 8,16,32:
CMP2 <ea>,Rn 8,16,32:
DIVS/DIVU <ea>,Dn 32÷16→16,16;<ea>,Dr–Dq 64÷32→32,32;<ea>,Dq 32÷32→32:
DIVSL/DIVUL <ea>,Dr–Dq 32÷32→32,32:
EXT Dn 8→16;Dn 16→32:
EXTB Dn 8→32:
MULS/MULU <ea>,Dn 16x16→32;<ea>,Dl 32x32→32;<ea>,Dh–Dl 32x32→64:
NEG <ea> 8,16,32:
NEGX <ea> 8,16,32:
SUB <ea>,Dn 8,16,32;Dn,<ea> 8,16,32:
SUBA <ea>,An 16,32:
SUBI #<data>,<ea> 8,16,32:
SUBQ #<data>,<ea> 8,16,32:
SUBX Dn,Dn 8,16,32;–(An),–(An) 8,16,32:
AND <ea>,Dn 8,16,32;Dn,<ea> 8,16,32:
ANDI #<data>,<ea> 8,16,32:
EOR Dn,<ea> 8,16,32:
EORI #<data>,<ea> 8, 16, 32:
NOT <ea> 8,16,32:
OR <ea>,Dn 8,16,32;Dn,<ea> 8,16,32:
ORI #<data>,<ea> 8,16,32:
ASL Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
ASR Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
LSL Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
LSR Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
ROL Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
ROR Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
ROXL Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
ROXR Dn,Dn 8,16,32;#data,Dn 8,16,32;ea 16:
SWAP Dn 32:
BCHG Dn,<ea> 8,32;#<data>,<ea> 8,32:
BCLR Dn,<ea> 8,32;#<data>,<ea> 8,32:
BSET Dn,<ea> 8,32;#<data>,<ea> 8,32:
BTST Dn,<ea> 8,32;#<data>,<ea> 8,32:
BFCHG <ea> {offset:width} 1–32:
BFCLR <ea> {offset:width} 1–32:
BFEXTS <ea> {offset:width}, Dn 1–32:
BFEXTU <ea> {offset:width}, Dn 1–32:
BFFFO <ea> {offset:width}, Dn 1–32:
BFINS Dn,<ea> {offset:width} 1–32:
BFSET <ea> {offset:width} 1–32:
BFTST <ea> {offset:width} 1–32:
ABCD Dn,Dn 8;–(An),–(An) 8:
NBCD <ea> 8:
PACK –(An),–(An) #<data> 8→16;Dn,Dn,#<data> 8→16:
SBCD Dn,Dn 8;–(An),–(An) 8:
UNPK –(An),–(An) #<data> 8→16;Dn,Dn,#<data> 8→16:
Bcc <label> 8,16,32:
FBcc <label> 8,16,32:
DBcc Dn,<label> 16:
FDBcc Dn,<label> 16:
Scc <ea> 8:
FScc <ea> 8:
BRA <label> 8,16,32:
BSR <label> 8,16,32:
JMP <ea>:
JSR <ea>:
NOP:
FNOP:
RTD #<data> 16:
RTR:
RTS:
TST <ea> 8,16,32:
FTST <ea> B,W,L,S,D,X,P;FPn X:
ANDI to SR #<data>,SR 16:
EORI to SR #<data>,SR 16:
FRESTORE <ea>:
FSAVE <ea>:
MOVE to SR <ea>,SR 16:
MOVE from SR SR,<ea> 16:
MOVE USP USP,An 32;An,USP 32:
MOVEC Rc,Rn 32;Rn,Rc 32:
MOVES Rn,<ea> 8,16,32;<ea>,Rn 8,16,32:
ORI to SR #<data>,SR 16:
RESET:
RTE:
STOP #<data> 16:
BKPT #<data>:
ILLEGAL:
TRAP #<data>:
TRAPcc ;#<data> 16,32:
FTRAPcc ;#<data> 16,32:
TRAPV:
ANDI to SR #<data>,CCR 8:
EORI to SR #<data>,CCR 8:
MOVE to SR <ea>,CCR 16:
MOVE from SR CCR,<ea> 16:
ORI to SR #<data>,CCR 8:
CINVL caches,(An):
CINVP caches, (An):
CINVA caches:
CPUSHL caches,(An):
CPUSHP caches,(An):
CPUSHA caches:
CAS Dc,Du,<ea> 8,16,32:
CAS2 Dc1–Dc2,Du1–Du2 16,32;(Rn)–(Rn) 16,32:
TAS <ea> 8:
cpBcc <label> 16,32:
cpDBcc <label>,Dn 16:
cpGEN UserDefined UserDefined:
cpRESTORE <ea>:
cpSAVE <ea>:
cpScc <ea> 8:
cpTRAPcc ;#<data> 16,32:
PBcc MC68851 <label>:
PDBcc MC68851 Dn,<label>:
PFLUSHA MC68030;MC68040;MC68851:
PFLUSH MC68040 (An):
PFLUSHN MC68040 (An):
PFLUSHAN MC68040:
PFLUSHS MC68851:
PFLUSHR MC68851 <ea>:
PLOAD MC68030 FC,<ea>;MC68851 FC,<ea>:
PMOVE MC68030 MRn,<ea> 8,16,32,64;MC68851 <ea>,MRn 8,16,32,64:
PRESTORE MC68851 <ea>:
PSAVE MC68851 <ea>:
PScc MC68851 <ea> 8:
PTEST MC68030 (An);MC68040 (An);MC68851 (An):
PTRAPcc MC68851 #<data> 16,32:
F<dop> <ea>,FPn B,W,L,S,D,X,P;FPm,FPn X:
F<mop> <ea>,FPn B,W,L,S,D,X,P;FPm,FPn X;FPn X: